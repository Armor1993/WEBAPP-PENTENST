[{"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\"\r\n        type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1", "url": "http://iyte.edu.tr/", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "0"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1", "url": "http://iyte.edu.tr/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1", "url": "http://iyte.edu.tr/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1", "url": "http://iyte.edu.tr/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "7", "url": "http://iyte.edu.tr/robots.txt", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "171", "url": "http://iyte.edu.tr/yenikayit/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "9"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "171", "url": "http://iyte.edu.tr/yenikayit/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "10"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "171", "url": "http://iyte.edu.tr/yenikayit/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "11"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "184", "url": "http://iyte.edu.tr/Files/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "12"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "186", "url": "http://iyte.edu.tr/aday/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "13"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "186", "url": "http://iyte.edu.tr/aday/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "14"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "186", "url": "http://iyte.edu.tr/aday/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "15"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "HTTP/1.1 500 Internal Server Error", "pluginId": "90022", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.", "messageId": "189", "url": "http://iyte.edu.tr/App_Code/", "reference": "", "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.", "alert": "Application Error Disclosure", "param": "", "attack": "", "name": "Application Error Disclosure", "risk": "Medium", "id": "16"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "189", "url": "http://iyte.edu.tr/App_Code/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "17"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\"\r\n        type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "190", "url": "http://iyte.edu.tr", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "18"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "190", "url": "http://iyte.edu.tr", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "19"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "190", "url": "http://iyte.edu.tr", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "20"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "190", "url": "http://iyte.edu.tr", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "21"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "192", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "22"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "192", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "23"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "192", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "24"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "192", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "25"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "241", "url": "http://iyte.edu.tr/Index.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "26"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "241", "url": "http://iyte.edu.tr/Index.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "27"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "241", "url": "http://iyte.edu.tr/Index.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "28"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "241", "url": "http://iyte.edu.tr/Index.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "29"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "243", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "30"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "243", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "31"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "243", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "32"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "243", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "33"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "243", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "34"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "262", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "35"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "262", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "36"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "262", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "37"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "262", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "38"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "262", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "39"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "40"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "41"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "42"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "43"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "44"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "45"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "46"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "47"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "48"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "49"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "50"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "51"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "52"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "53"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "54"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "281", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "55"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "281", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "56"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "281", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "57"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "281", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "58"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "281", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "59"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "287", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "60"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "287", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "61"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "287", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "62"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "287", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "63"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "287", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "64"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "296", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "65"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "296", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "66"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "296", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "67"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "296", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "68"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "296", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "69"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "70"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "71"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "72"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "73"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "74"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "316", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "75"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "316", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "76"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "316", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "77"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "316", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "78"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "316", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "79"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "323", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "80"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "323", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "81"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "323", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "82"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "323", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "83"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "323", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "84"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "327", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "85"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "327", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "86"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "327", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "87"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "327", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "88"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "327", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "89"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "331", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "90"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "331", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "91"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "331", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "92"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "331", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "93"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "331", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "94"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "335", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "95"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "335", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "96"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "335", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "97"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "335", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "98"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "335", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "99"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "343", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "100"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "343", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "101"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "343", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "102"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "343", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "103"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "343", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "104"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "347", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "105"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "347", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "106"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "347", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "107"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "347", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "108"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "347", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "351", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "110"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "351", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "111"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "351", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "112"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "351", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "113"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "351", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "114"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "115"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "116"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "117"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "118"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "119"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "364", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "120"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "364", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "121"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "364", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "122"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "364", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "123"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "364", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "124"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "125"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "126"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "127"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "128"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "129"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "376", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "130"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "376", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "131"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "376", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "132"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "376", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "133"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "376", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "134"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "384", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "135"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "384", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "136"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "384", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "137"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "384", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "138"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "384", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "139"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "388", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "140"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "388", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "141"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "388", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "142"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "388", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "143"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "388", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "144"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "392", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "145"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "392", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "146"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "392", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "147"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "392", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "148"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "392", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "149"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "400", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "150"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "400", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "151"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "400", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "152"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "400", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "153"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "400", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "154"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "155"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "156"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "157"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "158"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "159"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "408", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "160"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "408", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "161"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "408", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "162"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "408", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "163"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "408", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "164"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "417", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "165"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "417", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "166"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "417", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "167"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "417", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "168"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "417", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "169"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "422", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "170"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "422", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "171"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "422", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "172"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "422", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "173"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "422", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "174"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "427", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "175"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "427", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "176"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "427", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "177"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "427", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "178"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "427", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "179"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "431", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "180"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "431", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "181"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "431", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "182"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "431", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "183"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "431", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "184"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "435", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "185"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "435", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "186"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "435", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "187"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "435", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "188"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "435", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "189"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "440", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "190"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "440", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "191"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "440", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "192"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "440", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "193"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "440", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "194"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "195"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "196"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "197"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "198"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "199"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "448", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "200"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "448", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "201"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "448", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "448", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "203"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "448", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "204"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "205"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "206"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "207"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "208"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "209"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "479", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "210"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "479", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "211"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "479", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "212"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "479", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "213"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "479", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "214"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "483", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "215"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "483", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "216"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "483", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "217"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "483", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "218"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "483", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "219"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "491", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "220"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "491", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "221"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "491", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "222"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "491", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "223"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "491", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "224"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "225"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "226"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "227"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "228"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "229"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "499", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "230"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "499", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "231"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "499", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "232"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "499", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "233"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "499", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "234"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "235"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "236"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "237"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "238"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "239"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "507", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "240"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "507", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "241"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "507", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "242"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "507", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "243"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "507", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "244"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "514", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "245"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "514", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "246"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "514", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "247"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "514", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "248"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "514", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "249"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "250"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "251"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "252"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "253"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "254"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "525", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "255"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "525", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "256"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "525", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "257"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "525", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "258"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "525", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "259"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "531", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "260"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "531", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "261"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "531", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "262"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "531", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "263"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "531", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "264"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "536", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "265"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "536", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "266"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "536", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "267"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "536", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "268"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "536", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "269"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "270"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "271"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "272"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "273"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "274"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "558", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "275"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "558", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "276"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "558", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "277"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "558", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "278"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "558", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "279"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "574", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "280"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "574", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "281"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "574", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "282"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "574", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "283"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "574", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "284"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "285"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "286"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "287"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "288"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "289"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "583", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "290"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "583", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "291"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "583", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "292"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "583", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "293"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "583", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "294"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "588", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "295"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "588", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "296"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "588", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "297"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "588", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "298"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "588", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "299"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "593", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "300"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "593", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "301"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "593", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "302"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "593", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "303"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "593", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "304"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "305"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "306"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "307"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "308"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "309"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "602", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "310"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "602", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "311"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "602", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "312"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "602", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "313"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "602", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "314"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "315"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "316"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "317"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "318"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "319"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "320"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "321"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "322"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "323"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "324"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "325"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "326"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "327"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "328"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "329"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "330"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "331"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "332"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "333"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/machform_loader.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/machform_loader.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "334"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "335"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "336"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "621", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "337"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "625", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "338"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "625", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "339"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "625", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "340"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "625", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "341"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "625", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "342"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "629", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "343"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "629", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "344"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "629", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "345"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "629", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "346"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "629", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "347"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "633", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "348"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "633", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "349"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "633", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "350"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "633", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "351"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "633", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "352"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "637", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "353"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "637", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "354"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "637", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "355"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "637", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "356"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "637", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "357"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "358"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "359"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "360"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "361"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "362"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "645", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "363"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "645", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "364"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "645", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "365"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "645", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "366"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "645", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "367"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "649", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "368"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "649", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "369"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "649", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "370"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "649", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "371"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "649", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "372"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "653", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "373"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "653", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "374"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "653", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "375"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "653", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "376"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "653", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "377"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "657", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "378"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "657", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "379"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "657", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "380"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "657", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "381"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "657", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "382"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "661", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "383"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "661", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "384"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "661", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "385"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "661", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "386"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "661", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "387"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "665", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "388"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "665", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "389"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "665", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "390"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "665", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "391"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "665", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "392"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "674", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "393"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "674", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "394"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "674", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "395"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "674", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "396"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "674", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "397"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "678", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "398"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "678", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "399"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "678", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "400"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "678", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "401"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "678", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "402"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "687", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "403"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "687", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "404"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "687", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "405"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "687", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "406"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "407"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "408"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "409"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "410"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "411"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "697", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "412"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "697", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "413"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "697", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "414"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "697", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "415"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "697", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "416"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "766", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "417"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "766", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "418"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "766", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "419"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "766", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "420"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "766", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "421"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "422"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "423"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "424"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "425"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "426"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "781", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "427"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "781", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "428"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "781", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "429"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "781", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "430"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "781", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "431"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "783", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "432"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "783", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "433"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "783", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "434"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "783", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "435"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "783", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "436"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "437"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "438"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "439"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "440"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "441"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "801", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "442"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "801", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "443"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "801", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "444"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "801", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "445"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "801", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "446"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "803", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "447"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "803", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "448"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "803", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "449"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "803", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "450"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "803", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "451"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "805", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "452"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "805", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "453"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "805", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "454"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "805", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "455"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "805", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "456"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "807", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "457"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "807", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "458"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "807", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "459"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "807", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "460"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "807", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "461"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "816", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "462"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "816", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "463"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "816", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "464"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "816", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "465"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "816", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "466"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "821", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "467"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "821", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "468"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "821", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "469"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "821", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "470"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "821", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "471"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "823", "url": "http://iyte.edu.tr/rss.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "472"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "824", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "473"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "824", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "474"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "824", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "475"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "824", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "476"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "824", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "477"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "829", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "478"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "829", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "479"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "829", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "480"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "829", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "481"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "829", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "482"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "833", "url": "http://iyte.edu.tr/js/mmenu/menu_fullwidth.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "483"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "836", "url": "http://iyte.edu.tr/css/easyslidercss.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "484"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "838", "url": "http://iyte.edu.tr/css/metin.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "485"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "839", "url": "http://iyte.edu.tr/css/acrmn/format.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "486"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://www.stemkoski.com/wp-content/themes/WP_Premium/taber.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://www.stemkoski.com/wp-content/themes/WP_Premium/taber.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "487"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://www.stemkoski.com/wp-content/themes/WP_Premium/hover.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://www.stemkoski.com/wp-content/themes/WP_Premium/hover.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "488"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type='text/javascript' src='http://www.stemkoski.com/wp-includes/js/l10n.js?ver=20101110'></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://www.stemkoski.com/wp-includes/js/l10n.js?ver", "attack": "20101110", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "489"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js?ver=1.3.2'></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js?ver", "attack": "1.3.2", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "490"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type='text/javascript' src='http://www.stemkoski.com/wp-content/plugins/s-simple-accordion/s-simple-accordion.js?ver=0.1'></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://www.stemkoski.com/wp-content/plugins/s-simple-accordion/s-simple-accordion.js?ver", "attack": "0.1", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "491"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "841", "url": "http://iyte.edu.tr/css/acrmn/text.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "492"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "842", "url": "http://iyte.edu.tr/js/searchoption.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "493"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "843", "url": "http://iyte.edu.tr/js/popup.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "494"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "844", "url": "http://iyte.edu.tr/js/map.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "495"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "845", "url": "http://iyte.edu.tr/js/jquery.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "496"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "846", "url": "http://iyte.edu.tr/js/jquery-1.2.6.pack.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "497"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "847", "url": "http://iyte.edu.tr/js/easySlider1.5.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "498"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "848", "url": "http://iyte.edu.tr/js/easysliderparameter.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "499"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "849", "url": "http://iyte.edu.tr/js/acrmn/acrmn.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "500"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "851", "url": "http://iyte.edu.tr/js/simplegallery.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "501"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "852", "url": "http://iyte.edu.tr/WebResource.axd?d=BPVVUjifcT_6ggUiGlLmYX6s4xnIfAbZwr0keoFRz9BJfccimqEGxdnMpA8XQiTC23RxPA9gOJQLstUWsnKV8Rly3zq75rcbRZgzpEmLmug1&t=636531774860000000", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "502"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "853", "url": "http://iyte.edu.tr/Files/EHK.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "503"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "855", "url": "http://iyte.edu.tr/ScriptResource.axd?d=w1mztn5LfgzCY2bpIFrEYM5sVt3abP2a_UwtL2Z0L0S3KWNAmf87_ZbprjuU8idwAzYaKCn6H35AK7jM4MeuARSVMjONsQOaiCpM_YvHY7iXB_VhKIH_mMLcj8CTQySymw_iHuy8YCYHxtvoaMoYRdT63-qhCVYeIVU8oir7I9hDqOrYXb-0x9GF2hvOES840&t=44237217", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "504"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "856", "url": "http://iyte.edu.tr/js/googleanalitik.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "505"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "857", "url": "http://iyte.edu.tr/img/dot.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "506"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "859", "url": "http://iyte.edu.tr/img/square.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "507"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "860", "url": "http://iyte.edu.tr/img/db.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "508"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "861", "url": "http://iyte.edu.tr/ScriptResource.axd?d=jQF8HNPiH1Tfx3gnV9ZLh373stLLniFyEGwnKeeNmnpMHIrBywALpWfbCAR4Trt11L8fpTTh3abV1MX5Miss96qmclqk1V622zHognItFz6BSnwz8-WBWG9pIf1TqyR82EaZJJIb9NCGOIKuE0CrhY2EUL7Qh8ggpFvUcAJjuIUDD3hXH-WIADn5zUdWxZdk0&t=44237217", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "509"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "862", "url": "http://iyte.edu.tr/img/twitter.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "510"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "863", "url": "http://iyte.edu.tr/img/facebook.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "511"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "864", "url": "http://iyte.edu.tr/img/line2p.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "512"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "865", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_15%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "513"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "866", "url": "http://iyte.edu.tr/img/dateimg/gun/23.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "514"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "869", "url": "http://iyte.edu.tr/img/dateimg/ay/05.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "515"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "871", "url": "http://iyte.edu.tr/img/dateimg/yil/2018.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "516"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "873", "url": "http://iyte.edu.tr/img/dateimg/gun/22.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "517"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "874", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_04_02%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "518"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "875", "url": "http://iyte.edu.tr/img/dateimg/gun/13.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "519"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "876", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_18%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "520"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "877", "url": "http://iyte.edu.tr/img/dateimg/gun/18.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "521"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "878", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_17%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "522"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "879", "url": "http://iyte.edu.tr/img/dateimg/gun/17.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "523"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "880", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_15%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "524"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "881", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_08%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "525"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "882", "url": "http://iyte.edu.tr/img/dateimg/gun/15.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "526"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "883", "url": "http://iyte.edu.tr/img/line1p.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "527"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "884", "url": "http://iyte.edu.tr/img/facebook.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "528"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "885", "url": "http://iyte.edu.tr/img/twitter.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "529"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "886", "url": "http://iyte.edu.tr/img/flick.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "530"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "887", "url": "http://iyte.edu.tr/img/instagram.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "531"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "888", "url": "http://iyte.edu.tr/img/rss.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "532"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "889", "url": "http://iyte.edu.tr/img/app_store.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "533"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "890", "url": "http://iyte.edu.tr/img/youtube.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "534"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "891", "url": "http://iyte.edu.tr/img/akts.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "535"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "892", "url": "http://iyte.edu.tr/img/ds-label.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "536"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "893", "url": "http://iyte.edu.tr/img/extrabutonimg/obs2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "537"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "895", "url": "http://iyte.edu.tr/img/extrabutonimg/izmir-tanitim-logo-tr.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "538"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "896", "url": "http://iyte.edu.tr/img/eio_buton-d.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "539"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "897", "url": "http://iyte.edu.tr/img/extrabutonimg/kutuphane2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "540"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "898", "url": "http://iyte.edu.tr/img/extrabutonimg/mn_disable.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "541"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "899", "url": "http://iyte.edu.tr/img/extrabutonimg/bulten2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "542"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "900", "url": "http://iyte.edu.tr/img/extrabutonimg/tto.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "543"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "901", "url": "http://iyte.edu.tr/img/extrabutonimg/bimer.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "544"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "902", "url": "http://iyte.edu.tr/img/extrabutonimg/iztekgeb.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "545"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "903", "url": "http://iyte.edu.tr/js/mmenu/reset.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "546"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "904", "url": "http://iyte.edu.tr/img/extrabutonimg/nn2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "547"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "905", "url": "http://iyte.edu.tr/yenikayit/rektorun-mesaji.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "548"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "905", "url": "http://iyte.edu.tr/yenikayit/rektorun-mesaji.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "549"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "905", "url": "http://iyte.edu.tr/yenikayit/rektorun-mesaji.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "550"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "908", "url": "http://iyte.edu.tr/yenikayit/akademik-takvim.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "551"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "908", "url": "http://iyte.edu.tr/yenikayit/akademik-takvim.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "552"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "908", "url": "http://iyte.edu.tr/yenikayit/akademik-takvim.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "553"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "909", "url": "http://iyte.edu.tr/yenikayit/nasil-kayit-olurum.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "554"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "909", "url": "http://iyte.edu.tr/yenikayit/nasil-kayit-olurum.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "555"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "909", "url": "http://iyte.edu.tr/yenikayit/nasil-kayit-olurum.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "556"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "916", "url": "http://iyte.edu.tr/yenikayit/ingilizce-yeterlilik-sinavi.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "557"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "916", "url": "http://iyte.edu.tr/yenikayit/ingilizce-yeterlilik-sinavi.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "558"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "916", "url": "http://iyte.edu.tr/yenikayit/ingilizce-yeterlilik-sinavi.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "559"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "917", "url": "http://iyte.edu.tr/yenikayit/katki-payi-ucretleri.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "560"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "917", "url": "http://iyte.edu.tr/yenikayit/katki-payi-ucretleri.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "561"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "917", "url": "http://iyte.edu.tr/yenikayit/katki-payi-ucretleri.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "562"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "918", "url": "http://iyte.edu.tr/yenikayit/yerleske-haritasi.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "563"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "918", "url": "http://iyte.edu.tr/yenikayit/yerleske-haritasi.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "564"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "918", "url": "http://iyte.edu.tr/yenikayit/yerleske-haritasi.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "565"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "923", "url": "http://iyte.edu.tr/yenikayit/iyte-ulasim.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "566"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "923", "url": "http://iyte.edu.tr/yenikayit/iyte-ulasim.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "567"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "923", "url": "http://iyte.edu.tr/yenikayit/iyte-ulasim.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "568"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "924", "url": "http://iyte.edu.tr/yenikayit/css/reset.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "569"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "926", "url": "http://iyte.edu.tr/yenikayit/css/aday.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "570"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "927", "url": "http://iyte.edu.tr/yenikayit/css/style.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "571"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "930", "url": "http://iyte.edu.tr/yenikayit/img/yenikayit2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "576"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "932", "url": "http://iyte.edu.tr/yenikayit/img/kafeteryag.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "577"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\"\r\n        type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1000", "url": "http://iyte.edu.tr/", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "582"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1000", "url": "http://iyte.edu.tr/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "583"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1000", "url": "http://iyte.edu.tr/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "584"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1000", "url": "http://iyte.edu.tr/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "585"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1090", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "613"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1090", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "614"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1090", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "615"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1090", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "616"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\"\r\n        type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1112", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "622"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1112", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "623"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1112", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "624"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1112", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "625"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1192", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "626"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1192", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "627"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1192", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "628"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1192", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "629"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1192", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "630"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "637"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "638"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "639"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "640"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "641"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "642"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "643"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "644"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "645"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "646"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1223", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "651"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1223", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "652"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1223", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "653"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1223", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "654"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1223", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "655"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1234", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "656"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1234", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "657"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1234", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "658"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1234", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "659"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1234", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "660"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1239", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "661"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1239", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "662"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1239", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "663"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1239", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "664"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1239", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "665"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1244", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "666"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1244", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "667"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1244", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "668"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1244", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "669"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1244", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "670"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1248", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "671"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1248", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "672"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1248", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "673"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1248", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "674"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1248", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "675"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1253", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "676"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1253", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "677"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1253", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "678"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1253", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "679"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1253", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "680"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1255", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "681"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1255", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "682"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1255", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "683"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1255", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "684"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1255", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "685"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1279", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "693"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1279", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "694"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1279", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "695"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1279", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "696"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1279", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "697"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1284", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "699"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1284", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "700"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1284", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "701"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1284", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "702"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1284", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "703"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1290", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "705"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1290", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "706"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1290", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "707"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1290", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "708"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1290", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "709"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1305", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "718"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1305", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "719"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1305", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "720"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1305", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "721"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1305", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "722"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1309", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "723"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1309", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "724"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1309", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "725"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1309", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "726"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1309", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "727"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1315", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "729"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1315", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "730"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1315", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "731"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1315", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "732"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1315", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "733"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1326", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "738"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1326", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "739"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1326", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "740"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1326", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "741"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1326", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "742"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "743"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "744"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "745"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "746"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/machform_loader.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/machform_loader.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "747"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "748"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "749"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1332", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "750"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1342", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "755"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1342", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "756"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1342", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "757"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1342", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "758"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1342", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "759"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1346", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "760"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1346", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "761"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1346", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "762"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1346", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "763"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1346", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "764"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "770"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "771"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "772"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "773"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1355", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "774"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1360", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "775"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1360", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "776"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1360", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "777"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1360", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "778"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1360", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "779"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "787"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "788"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "789"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "790"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1368", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "791"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1389", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "805"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1389", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "806"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1389", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "807"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1389", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "808"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1389", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "809"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1394", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "810"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1394", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "811"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1394", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "812"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1394", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "813"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1394", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "814"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1398", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "815"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1398", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "816"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1398", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "817"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1398", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "818"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1398", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "819"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "820"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "821"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "822"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "823"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1404", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "824"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1409", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "825"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1409", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "826"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1409", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "827"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1409", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "828"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1409", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "829"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1414", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "830"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1414", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "831"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1414", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "832"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1414", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "833"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1414", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "834"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1421", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "839"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1421", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "840"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1421", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "841"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1421", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "842"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1421", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "843"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1437", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "853"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1437", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "854"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1437", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "855"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1437", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "856"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1437", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "857"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1442", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "858"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1442", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "859"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1442", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "860"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1442", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "861"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1442", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "862"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1468", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "883"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1468", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "884"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1468", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "885"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1468", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "886"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1468", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "887"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1473", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "888"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1473", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "889"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1473", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "890"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1473", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "891"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1473", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "892"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1487", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "903"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1487", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "904"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1487", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "905"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1487", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "906"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1487", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "907"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1492", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "908"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1492", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "909"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1492", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "910"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1492", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "911"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1492", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "912"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1508", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "923"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1508", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "924"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1508", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "925"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1508", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "926"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1508", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "927"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1512", "url": "http://iyte.edu.tr/js%5Csearchoption.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "928"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1518", "url": "http://iyte.edu.tr/js/map2.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "934"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "935"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "936"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "937"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "938"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "939"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1530", "url": "http://iyte.edu.tr/ScriptResource.axd?d=lThCKBp-oMhoPX3RAVbyTGAm_H_K1eSDQKS0urtVrHFXhjWLQAGDyUBjDOko84OTipkoodg8rhVfeMMbkmeL0dyxvwccE84917offlwjlgTTmQn6Lsb9Fw36fB8kVRKPhT8o6IZrIbLl7I5kII8fSw2&t=ffffffffec54f2d7", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "945"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1531", "url": "http://iyte.edu.tr/img/altmenu/home.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "946"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1538", "url": "http://iyte.edu.tr/ScriptResource.axd?d=hE12-FyLF4GD41VLrOqrpvQPf8iGsBZSJgm1fe-GhCKNDiBe8QrY_YXVBvdNGavIoGe9CcISevG52MYIHxU7W0lpJ6viJ8hjjGl5SbNEgRbeSTv3aM2DKmY7bbsOCbSTnf37DF6g19fsBEP_XB3Uag2&t=ffffffffec54f2d7", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "952"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1539", "url": "http://iyte.edu.tr/img/sayfaimg/ayrac.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "953"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1546", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5Cdefault.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "959"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1552", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "965"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1552", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "966"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1552", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "967"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1552", "url": "http://iyte.edu.tr/Liste.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "968"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1559", "url": "http://iyte.edu.tr/css/persdigid.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "974"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1560", "url": "http://iyte.edu.tr/js/jquery-1.3.1.min.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "975"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1561", "url": "http://iyte.edu.tr/js/proc.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "976"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1572", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C200.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "987"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1573", "url": "http://iyte.edu.tr/img/uio/square.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "988"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1580", "url": "http://iyte.edu.tr/images/Sayfalar/uio/mehtapemirdageanes.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "994"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1584", "url": "http://iyte.edu.tr/img/uio/psep.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "995"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1585", "url": "http://iyte.edu.tr/Index.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "996"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1585", "url": "http://iyte.edu.tr/Index.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "997"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1585", "url": "http://iyte.edu.tr/Index.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "998"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1585", "url": "http://iyte.edu.tr/Index.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "999"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1587", "url": "http://iyte.edu.tr/img/uio/mail.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1000"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1592", "url": "http://iyte.edu.tr/img/uio/phone.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1006"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1593", "url": "http://iyte.edu.tr/images/Sayfalar/uio/asenaaltan.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1007"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1594", "url": "http://iyte.edu.tr/images/Sayfalar/uio/ozgetopcuoglu.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1008"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1595", "url": "http://iyte.edu.tr/images/Sayfalar/uio/silaturacbaykara.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1009"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1596", "url": "http://iyte.edu.tr/images/Sayfalar/uio/denizsengel.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1010"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1602", "url": "http://iyte.edu.tr/img/uio/uio.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1016"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1603", "url": "http://iyte.edu.tr/img/squarelong.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1017"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1604", "url": "http://iyte.edu.tr/images/Sayfalar/uio/oykumkirsoybektas.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1018"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1606", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C740.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1024"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1621", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C75.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1035"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1626", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C370.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1041"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1632", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1047"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1632", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1048"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1632", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1049"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1632", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1050"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1632", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=60", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1051"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1638", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1057"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1638", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1058"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1638", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1059"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1638", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1060"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1638", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=77", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1061"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1653", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C76.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1077"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1665", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_06_27/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1088"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1670", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C652.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1089"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1761", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1112"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1761", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1113"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1761", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1114"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1761", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1115"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1761", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=44", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1116"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1767", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C366.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1121"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1771", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C77.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1125"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1772", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C407.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1126"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1780", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C689.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1134"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1135"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1136"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1137"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1138"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/machform_loader.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/machform_loader.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1139"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1140"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1141"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1781", "url": "http://iyte.edu.tr/Altsayfa.aspx?m=1444", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1142"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1795", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_02_10%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1158"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1797", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1164"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1797", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1165"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1797", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1166"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1797", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1167"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1797", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=46", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1168"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1818", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_02_27/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1189"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1820", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C744.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1190"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1825", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1196"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1825", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1197"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1825", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1198"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1825", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1199"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1825", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=75", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1200"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1844", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_11_28%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1216"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1846", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C413.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1222"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1861", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C515.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1230"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1862", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C49.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1231"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1863", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C424.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1232"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1864", "url": "http://iyte.edu.tr/css/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1233"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1865", "url": "http://iyte.edu.tr/css/acrmn/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1234"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1866", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_11_28%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1235"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1867", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1236"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1867", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1237"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1867", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1238"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1867", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1239"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1867", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=38", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1240"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1869", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C808.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1241"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1872", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1247"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1872", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1248"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1872", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1249"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1872", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1250"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1872", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23038", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1251"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1886", "url": "http://iyte.edu.tr/js/gizlegoster.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1252"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1892", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_11_07%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1258"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1899", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C78.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1264"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1900", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_11_07%5C4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1265"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1901", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_11_07%5C5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1266"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1902", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_11_07%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1267"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1903", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C728.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1268"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1917", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C419.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1279"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1923", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C797.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1285"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1291"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1292"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1293"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1294"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12910", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1295"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1953", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C80.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1311"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1964", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/gs.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1317"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1966", "url": "http://iyte.edu.tr/img/sayfaimg/square120.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1318"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1967", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_06_16/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1319"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1969", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/bidb.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1320"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1970", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/hm.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1321"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1971", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/im.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1322"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1976", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/kddb.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1328"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1977", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/oidb.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1329"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1978", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/pdb.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1330"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1979", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1331"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "1979", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1332"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "1979", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1333"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1979", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1334"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "1979", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=92", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1335"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1980", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/sks.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1336"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1982", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/sg.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1337"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1983", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C658.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1338"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1984", "url": "http://iyte.edu.tr/img/sayfaimg/birimlogo/yi.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1339"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2001", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1355"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2001", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1356"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2001", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1357"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2001", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1358"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2001", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=76", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1359"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2312", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C90.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1629"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2314", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5Cdefault.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1630"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2315", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1631"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2315", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1632"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2315", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1633"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2315", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1634"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2315", "url": "http://iyte.edu.tr/Duyurular.aspx?m=i", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1635"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2317", "url": "http://iyte.edu.tr/DXR.axd?r=1_225,1_164,1_130,1_127-zlyIb", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1636"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2318", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C36.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1637"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2319", "url": "http://iyte.edu.tr/DXR.axd?r=1_28,1_32,1_3-zlyIb", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1638"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2320", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C669.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1639"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2321", "url": "http://iyte.edu.tr/img/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1640"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2322", "url": "http://iyte.edu.tr/img/dateimg/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1641"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2323", "url": "http://iyte.edu.tr/img/dateimg/ay/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1642"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2324", "url": "http://iyte.edu.tr/img/dateimg/gun/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1643"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2325", "url": "http://iyte.edu.tr/img/dateimg/yil/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1644"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2326", "url": "http://iyte.edu.tr/img/extrabutonimg/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1645"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2327", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1646"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2327", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1647"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2327", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1648"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2327", "url": "http://iyte.edu.tr/Giris.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1649"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2374", "url": "http://iyte.edu.tr/js/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1701"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2375", "url": "http://iyte.edu.tr/js/acrmn/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1702"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2376", "url": "http://iyte.edu.tr/js/mmenu/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1703"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2398", "url": "http://iyte.edu.tr/yenikayit/css/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1732"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2399", "url": "http://iyte.edu.tr/img/lft.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1733"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2401", "url": "http://iyte.edu.tr/yenikayit/img/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1738"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"Text/Javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2403", "url": "http://iyte.edu.tr/yenikayit/kayit-adimlari.html", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1739"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2403", "url": "http://iyte.edu.tr/yenikayit/kayit-adimlari.html", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1740"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2403", "url": "http://iyte.edu.tr/yenikayit/kayit-adimlari.html", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1741"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2403", "url": "http://iyte.edu.tr/yenikayit/kayit-adimlari.html", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1742"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2408", "url": "http://iyte.edu.tr/yenikayit/img/arrow-left.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1743"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2409", "url": "http://iyte.edu.tr/yenikayit/img/arrow-right.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1744"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2410", "url": "http://iyte.edu.tr/yenikayit/img/arrow-down.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1745"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2411", "url": "http://iyte.edu.tr/yenikayit/img/on-kayit-btn.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1746"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2412", "url": "http://iyte.edu.tr/yenikayit/img/gerekli-belgeler.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1747"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2413", "url": "http://iyte.edu.tr/yenikayit/img/ProfDrMustafaGUDEN.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1748"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2414", "url": "http://iyte.edu.tr/yenikayit/js/AAZoom/cloud-zoom.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1749"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2417", "url": "http://iyte.edu.tr/yenikayit/js/AAZoom/jquery.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1750"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2418", "url": "http://iyte.edu.tr/yenikayit/js/AAZoom/cloud-zoom.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1751"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2419", "url": "http://iyte.edu.tr/yenikayit/img/kroki.gif", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1752"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2420", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2018_04_10%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1753"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2422", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C311.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1758"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2424", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_06/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1759"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2429", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C646.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1763"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2430", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_04/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1764"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2432", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1765"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2432", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1766"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2432", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1767"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2432", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1768"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2432", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=68", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1769"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2434", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C317.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1770"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2435", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2016_08_11%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1771"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\"\r\n        type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2436", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1772"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2436", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1773"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2436", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1774"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2436", "url": "http://iyte.edu.tr/AnaSayfa.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1775"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2438", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C647.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1776"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2439", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1777"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2439", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1778"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2439", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1779"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2439", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1780"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2439", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=96", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1781"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2441", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_11_22/5.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1782"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2443", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C411.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1783"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2444", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_06_16/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1784"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2445", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C576.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1785"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2446", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1786"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2446", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1787"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2446", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1788"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2446", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1789"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2446", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12634", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1790"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2448", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2016_08_11%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1791"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2449", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C319.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1792"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2450", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C682.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1793"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2451", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1794"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2451", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1795"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2451", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1796"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2451", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1797"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2451", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=98", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1798"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2453", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C56.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1799"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2454", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_07_30/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1800"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2456", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C678.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1801"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2457", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1802"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2457", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1803"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2457", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1804"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2457", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1805"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2457", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=97", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1806"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2459", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2016_02_22%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1807"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2460", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C690.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1808"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2461", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1809"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2461", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1810"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2461", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1811"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2461", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1812"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2461", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=99", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1813"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2463", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C322.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1814"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2464", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2015_11_16%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1815"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2465", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C323.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1816"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2466", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C621.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1817"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2467", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1818"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2467", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1819"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2467", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1820"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2467", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1821"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2467", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=100", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1822"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2469", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C38.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1823"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2470", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2015_06_23/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1824"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2472", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C691.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1825"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1826"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1827"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1828"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1829"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2474", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=69", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1830"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2476", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C402.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1831"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2477", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/16.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1832"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2479", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C81.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1833"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2480", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C623.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1834"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2481", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C644.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1835"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2482", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1836"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2482", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1837"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2482", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1838"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2482", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1839"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2482", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2160", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1840"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2484", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1841"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2484", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1842"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2484", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1843"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2484", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1844"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2484", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=78", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1845"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2486", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_04_06/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1846"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2488", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C640.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1847"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2489", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C400.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1848"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2490", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1849"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2490", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1850"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2490", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1851"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2490", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1852"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2490", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2158", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1853"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2492", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C396.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1854"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2493", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/17.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1855"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2494", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C421.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1856"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1857"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1858"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1859"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1860"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2495", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2154", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1861"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2497", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C629.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1862"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2498", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C805.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1863"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2499", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_03_28/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1864"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2501", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C63.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1865"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2502", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C636.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1866"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1867"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1868"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1869"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1870"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2503", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23009", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1871"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2505", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1872"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2505", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1873"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2505", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1874"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2505", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1875"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2505", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=104", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1876"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2507", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C64.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1877"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2508", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1878"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2509", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C653.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1879"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2510", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C82.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1880"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2511", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1881"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2511", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1882"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2511", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1883"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2511", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1884"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2511", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=105", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1885"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2513", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_07_27/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1886"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2515", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C666.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1887"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2516", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C61.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1888"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2517", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C660.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1889"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1890"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1891"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1892"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1893"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2518", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=43", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1894"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2520", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1895"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2520", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1896"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2520", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1897"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2520", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1898"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2520", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=102", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1899"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2522", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C425.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1900"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2523", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_11_06/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1901"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2525", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C809.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1902"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2526", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C679.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1903"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2527", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1904"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2527", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1905"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2527", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1906"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2527", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1907"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2527", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=103", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1908"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2528", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C310.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1909"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2530", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1910"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2530", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1911"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2530", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1912"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2530", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1913"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2530", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23040", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1914"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2532", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/19.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1915"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2533", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C398.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1916"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2534", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C560.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1917"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2535", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1918"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2535", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1919"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2535", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1920"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2535", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1921"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2535", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2156", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1922"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2537", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/9.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1923"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2538", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C680.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1924"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2539", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C347.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1925"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2540", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C307.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1926"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2541", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1927"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2541", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1928"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2541", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1929"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2541", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1930"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2541", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=101", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1931"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2543", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1932"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2545", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_04_15/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1933"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2547", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C688.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1934"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2548", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_02_10/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1935"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1936"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1937"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1938"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1939"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2554", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=70", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1940"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2556", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_02_10/7.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1941"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2557", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1942"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2558", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C314.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1943"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2559", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C677.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1944"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2560", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C638.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1945"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2561", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1946"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2561", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1947"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2561", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1948"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2561", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1949"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2561", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=109", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1950"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2563", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1951"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2563", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1952"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2563", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1953"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2563", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1954"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2563", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1202", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1955"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2565", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C417.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1956"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2566", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C332.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1957"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2567", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/12.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1958"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2568", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C417.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1959"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2569", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C686.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1960"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2570", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C331.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1961"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2571", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1962"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2571", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1963"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2571", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1964"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2571", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1965"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2571", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=108", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1966"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2573", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_04_20/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1967"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2575", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1968"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2575", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1969"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2575", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1970"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2575", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1971"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2575", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=45", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1972"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2577", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C723.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1973"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1974"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1975"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1976"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1977"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2578", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=107", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1978"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2580", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C335.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1979"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2581", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C85.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1980"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2582", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C620.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1981"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2583", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_18/13.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1982"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2584", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C334.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1983"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2585", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C687.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1984"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2586", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1985"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2586", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1986"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2586", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1987"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2586", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1988"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2586", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=106", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1989"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2588", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_01_30/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1990"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2590", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1991"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2590", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1992"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2590", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "1993"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2590", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1994"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2590", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=79", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "1995"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2592", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C630.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1996"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2593", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C40.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1997"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2594", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1998"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2594", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "1999"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2594", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2000"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2594", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2001"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2594", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=71", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2002"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2596", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C628.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2003"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2004"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2005"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2006"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2007"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=111", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2008"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2599", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C343.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2009"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2600", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C69.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2010"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2601", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_04_04/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2011"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2603", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C648.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2012"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2604", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C624.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2013"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2605", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C68.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2014"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2015"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2016"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2017"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2018"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2606", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=110", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2019"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2608", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C639.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2020"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2609", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2021"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2609", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2022"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2609", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2023"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2609", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2024"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2609", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1133", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2025"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2026"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2027"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2028"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2029"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=112", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2030"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2613", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C336.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2614", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C681.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2032"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2615", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C71.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2033"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2616", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C178.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2034"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2035"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2036"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2037"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2038"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2617", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=113", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2039"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2619", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_29/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2040"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2621", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2041"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2621", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2042"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2621", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2043"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2621", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2044"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2621", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=114", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2045"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2623", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C692.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2046"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2624", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C684.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2047"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2625", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C41.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2048"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2626", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2049"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2626", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2050"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2626", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2051"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2626", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2052"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2626", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=72", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2053"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2628", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_29/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2054"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2630", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C743.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2055"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2631", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2056"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2631", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2057"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2631", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2058"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2631", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2059"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2631", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=29", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2060"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2633", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C337.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2061"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2634", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_07_13/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2062"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2636", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_06_17/2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2063"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2638", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C410.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2064"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2639", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C651.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2065"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2640", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C177.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2066"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2067"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2068"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2069"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2070"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2641", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12633", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2071"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2643", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C593.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2072"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2644", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2073"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2644", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2074"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2644", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2075"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2644", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2076"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2644", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=224", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2077"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2646", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_12_19%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2078"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2647", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_06_21%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2079"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2648", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2012_04_26%5C1.idTabs.min.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2080"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2649", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C52.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2081"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2650", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C612.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2082"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2651", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2083"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2651", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2084"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2651", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2085"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2651", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2086"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2651", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=52", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2087"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2653", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2018_05_15%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2088"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2654", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_04_04%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2089"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2655", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_21/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2090"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2657", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C297.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2091"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2658", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2012_07_24/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2092"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2660", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C348.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2093"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2661", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2012_07_24/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2094"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2662", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2095"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2662", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2096"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2662", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2097"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2662", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2098"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2662", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=779", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2099"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2664", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2018_05_03%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2100"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2665", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2018_01_22%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2101"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2666", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_11_06%5C2.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2102"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2667", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_08_03%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2103"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2668", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_04_21%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2104"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2669", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_01_31%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2105"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2670", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_11_04%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2106"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2671", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_08_26%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2107"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2672", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_05_02%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2108"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2673", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2016_01_27%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2676", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2015_08_06%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2110"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2677", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2015_05_04%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2111"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2679", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2015_03_02%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2112"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2681", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2014_11_25%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2113"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2683", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C86.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2114"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2684", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C716.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2115"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2685", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2116"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2685", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2117"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2685", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2118"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2685", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2119"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2685", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=81", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2120"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2687", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C174.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2121"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2688", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C667.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2122"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2689", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2123"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2689", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2124"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2689", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2125"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2689", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2126"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2689", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=80", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2127"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2691", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_10_23%5C1.zip", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2128"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2692", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_10_23%5C2.zip", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2129"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2693", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C422.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2130"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2694", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_10_23/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2131"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2696", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_10_23/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2132"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2698", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C806.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2133"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2699", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2134"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2699", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2135"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2699", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2136"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2699", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2137"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2699", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=23015", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2138"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2701", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C346.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2139"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2702", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/14.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2140"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2703", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/15.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2141"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2704", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/16.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2142"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2705", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_02_05/17.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2143"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2706", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C721.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2144"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2707", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2145"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2707", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2146"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2707", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2147"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2707", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2148"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2707", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1134", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2149"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2709", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C404.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2150"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2710", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C631.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2151"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2711", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2152"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2711", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2153"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2711", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2154"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2711", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2155"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2711", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=2249", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2156"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2713", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C420.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2157"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2714", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C799.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2158"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2715", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2014_08_19%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2159"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2716", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2160"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2716", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2161"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2716", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2162"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2716", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2163"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2716", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12930", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2164"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2718", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C377.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2165"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2719", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_17/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2166"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2721", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_17/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2167"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2722", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_17/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2168"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2723", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_17/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2169"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2724", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C396.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2170"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2725", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2171"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2725", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2172"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2725", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2173"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2725", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2174"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2725", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1708", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2175"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2727", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C51.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2176"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2728", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C596.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2177"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2729", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2178"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2729", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2179"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2729", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2180"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2729", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2181"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2729", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=93", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2182"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2731", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C53.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2183"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2732", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C614.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2184"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2733", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2185"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2733", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2186"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2733", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2187"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2733", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2188"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2733", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=118", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2189"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2735", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2190"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2735", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2191"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2735", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2192"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2735", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2193"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2735", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2194"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2739", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2195"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2739", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2196"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2739", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2197"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2739", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2198"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2739", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2199"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2743", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2200"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2743", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2201"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2743", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2743", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2203"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2743", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2204"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2747", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2205"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2747", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2206"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2747", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2207"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2747", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2208"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2747", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2209"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2751", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2013_12_12%5C6.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2210"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2752", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2211"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2753", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C745.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2212"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2754", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2213"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2754", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2214"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2754", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2215"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2754", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2216"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2754", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=83", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2217"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2756", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C390.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2218"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2757", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_04_10/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2219"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2759", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C662.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2220"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2760", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2221"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2760", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2222"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2760", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2223"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2760", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2224"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2760", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=87", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2225"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2762", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C383.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2226"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2763", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_11_05/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2227"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2765", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C655.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2228"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2766", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2229"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2766", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2230"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2766", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2231"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2766", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2232"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2766", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1226", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2233"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2768", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C16.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2234"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2769", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C672.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2235"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2770", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2236"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2770", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2237"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2770", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2238"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2770", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2239"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2770", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=48", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2240"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2772", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C393.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2241"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2773", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C673.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2242"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2774", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2243"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2774", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2244"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2774", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2245"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2774", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2246"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2774", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=47", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2247"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2776", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C304.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2248"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2777", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_11_13/2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2249"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2779", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C355.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2250"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2780", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2251"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2780", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2252"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2780", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2253"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2780", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2254"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2780", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=845", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2255"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2782", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C385.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2256"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2783", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C696.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2257"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2784", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2258"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2784", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2259"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2784", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2260"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2784", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2261"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2784", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=50", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2262"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2786", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C378.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2263"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2787", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C730.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2264"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2788", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2265"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2788", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2266"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2788", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2267"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2788", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2268"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2788", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=49", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2269"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2790", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_07_04%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2270"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2793", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2013_05_27%5C13.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2271"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2797", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2013_05_27%5C15.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2272"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2799", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2014_12_30%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2273"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2802", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2013_05_27%5C11.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2274"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2899", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_10_04%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2275"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2901", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C391.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2276"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2902", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_07_04/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2277"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2904", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_01_08/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2278"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2906", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/13.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2279"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2908", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/14.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2280"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2909", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/15.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2281"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2910", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/16.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2282"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2911", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_12_30/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2283"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2913", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_12_30/2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2284"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2914", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2015_04_15/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2285"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2916", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_10_04/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2286"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2918", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_10_04/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2287"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2919", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C708.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2288"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2920", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2289"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2920", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2290"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2920", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2291"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2920", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2292"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2920", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1368", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2293"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2922", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C392.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2294"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2923", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_11_05/3.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2295"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2925", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C738.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2296"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2926", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2297"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2926", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2298"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2926", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2299"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2926", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2300"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2926", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=84", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2301"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2928", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C131.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2302"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2929", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C591.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2303"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2304"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2305"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2306"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2307"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2930", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=195", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2308"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2942", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_10_04%5C2.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2311"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2964", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C20.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2316"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2969", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C626.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2322"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2970", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2323"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2970", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2324"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2970", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2325"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2970", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2326"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2970", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=55", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2327"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2972", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C28.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2328"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2973", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2329"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2973", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2330"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2973", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2331"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2973", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2332"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2973", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=62", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2333"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2975", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C24.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2334"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2976", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C664.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2335"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2977", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C24.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2336"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2978", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2337"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2978", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2338"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2978", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2339"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2978", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2340"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2978", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=59", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2341"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2982", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C23.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2342"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2983", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C641.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2343"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2990", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2344"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "2990", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2345"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "2990", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2346"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2990", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2347"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "2990", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=58", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2348"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2992", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_09_02/7.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2349"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2996", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C129.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2350"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2998", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C656.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2352"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "2999", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_09_02/6.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2353"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3000", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2354"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3000", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2355"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3000", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2356"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3000", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2357"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3000", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=193", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2358"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3002", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C212.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2359"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3003", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C16.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2360"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3006", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2361"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3006", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2362"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3006", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2363"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3006", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2364"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3006", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=54", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2365"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3015", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C127.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2376"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3016", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_02_10/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2377"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3017", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2017_02_10/6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2378"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3018", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2379"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3018", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2380"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3018", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2381"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3018", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2382"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3018", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=191", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2383"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3020", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C675.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2384"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3022", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C207.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2386"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3023", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C685.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2387"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3024", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2388"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3024", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2389"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3024", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2390"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3024", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2391"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3024", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=457", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2392"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3026", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2393"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3026", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2394"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3026", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2395"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3026", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2396"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3026", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2397"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3038", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2398"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3038", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2399"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3038", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2400"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3038", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2401"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3038", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2402"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3049", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2403"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3049", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2404"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3049", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2405"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3049", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2406"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3049", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2407"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3060", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2408"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3060", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2409"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3060", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2410"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3060", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2411"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3060", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2412"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3064", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2413"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3064", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2414"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3064", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2415"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3064", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2416"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3064", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2417"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3065", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2418"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3065", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2419"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3065", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2420"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3065", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2421"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3065", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2422"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3074", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C376.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2423"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3075", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2424"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3075", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2425"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3075", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2426"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3075", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2427"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3075", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2428"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3081", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2429"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3083", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2430"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3084", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2431"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3085", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2432"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3086", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2433"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3087", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2434"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3088", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C395.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2435"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3089", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2436"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3089", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2437"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3089", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2438"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3089", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2439"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3089", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1658", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2440"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3091", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_12_09/7.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2441"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3092", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C21.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2442"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3093", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C695.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2443"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3094", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2444"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3094", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2445"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3094", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2446"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3094", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2447"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3094", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=56", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2448"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3096", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C165.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2449"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3097", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_07_17/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2450"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3099", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_07_17/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2451"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3100", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_01_06%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2452"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3101", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_01_06%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2453"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3102", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_01_06%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2454"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3103", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_01_06%5C4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2455"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3104", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_09_02/2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2456"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3105", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_09_02/4.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2457"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3106", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_09_18/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2458"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3108", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2012_06_29/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2459"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3110", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_09_05/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2460"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3111", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2011_08_01/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2461"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3114", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C706.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2462"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3115", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2463"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3115", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2464"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3115", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2465"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3115", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2466"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3115", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=257", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2467"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3117", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C28.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2468"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3118", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C32.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2469"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3119", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C394.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2470"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3120", "url": "http://iyte.edu.tr/yonetim/Images/Sayfalar/0/2014_11_13/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2471"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3121", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2472"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3121", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2473"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3121", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2474"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3121", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2475"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3121", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=66", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2476"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3123", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C556.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2477"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3124", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2478"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3124", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2479"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3124", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2480"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3124", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2481"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3124", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=57", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2482"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3168", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C741.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2555"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3169", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C73.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2556"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3170", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2557"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3170", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2558"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3170", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2559"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3170", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2560"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3170", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=127", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2561"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3172", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C72.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2562"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3173", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C742.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2563"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3174", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2564"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3174", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2565"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3174", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2566"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3174", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2567"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3174", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=126", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2568"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3176", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C327.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2569"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3177", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C705.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2570"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3178", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2571"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3178", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2572"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3178", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2573"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3178", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2574"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3178", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1036", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2575"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3180", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C733.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2576"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3181", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C181.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2577"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3182", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2578"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3182", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2579"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3182", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2580"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3182", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2581"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3182", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=286", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2582"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3184", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C642.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2583"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3185", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C326.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2584"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3186", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2585"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3186", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2586"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3186", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2587"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3186", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2588"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3186", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1035", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2589"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3188", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C157.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2590"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3189", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C613.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2591"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3190", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C406.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2592"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3191", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2593"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3191", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2594"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3191", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2595"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3191", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2596"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3191", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=240", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2597"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3193", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C635.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2598"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3194", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2599"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3194", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2600"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3194", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2601"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3194", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2602"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3194", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12503", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2603"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3196", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C617.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2604"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3197", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C47.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2605"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3198", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2606"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3198", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2607"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3198", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2608"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3198", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2609"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3198", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=35", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2610"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3200", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C650.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2611"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3201", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C48.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2612"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2613"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2614"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2615"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2616"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3202", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=37", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2617"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3204", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C683.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2618"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3205", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C74.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2619"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2620"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2621"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2622"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2623"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3206", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=128", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2624"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3208", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_11_08%5C1.04.2017).docx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2625"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3209", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2011_11_03/2.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2626"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3211", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2011_11_03/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2627"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3212", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C710.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2628"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3213", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C204.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2629"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3214", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2012_04_24%5C2.doc", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2630"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3215", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2012_04_24%5C1.doc", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2631"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3216", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2632"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3216", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2633"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3216", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2634"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3216", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2635"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3216", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=436", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2636"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3218", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C697.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2637"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3219", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2638"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3219", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2639"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3219", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2640"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3219", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2641"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3219", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=33", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2642"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3221", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C45.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2643"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3222", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2644"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3222", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2645"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3222", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2646"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3222", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2647"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3222", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2648"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3231", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2649"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3231", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2650"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3231", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2651"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3231", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2652"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3231", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2653"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3240", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C352.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2654"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3241", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_03/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2655"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3243", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_03/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2656"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3244", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C698.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2657"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3245", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2658"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3245", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2659"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3245", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2660"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3245", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2661"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3245", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1259", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2662"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3247", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_04_03/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2663"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3248", "url": "http://setloki.com/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2664"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3248", "url": "http://setloki.com/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2665"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3248", "url": "http://setloki.com/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2666"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3256", "url": "http://setloki.com/robots.txt", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2669"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3259", "url": "http://setloki.com/sitemap.xml", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2672"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3260", "url": "http://setloki.com", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2673"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3260", "url": "http://setloki.com", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2674"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3260", "url": "http://setloki.com", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2675"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3264", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C712.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2683"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3265", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C356.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2684"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2685"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "3266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2686"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2687"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2688"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3266", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1295", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2689"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "max-age=604800, public", "pluginId": "10015", "cweid": "525", "confidence": "Medium", "wascid": "13", "description": "The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.", "messageId": "3654", "url": "https://setloki.com/", "reference": "https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching", "solution": "Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.", "alert": "Incomplete or No Cache-control and Pragma HTTP Header Set", "param": "Cache-Control", "attack": "", "name": "Incomplete or No Cache-control and Pragma HTTP Header Set", "risk": "Low", "id": "2696"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Set-Cookie: __cfduid", "pluginId": "10011", "cweid": "614", "confidence": "Medium", "wascid": "13", "description": "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.", "messageId": "3654", "url": "https://setloki.com/", "reference": "http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)", "solution": "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.", "alert": "Cookie Without Secure Flag", "param": "__cfduid", "attack": "", "name": "Cookie Without Secure Flag", "risk": "Low", "id": "2697"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3654", "url": "https://setloki.com/", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2698"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3654", "url": "https://setloki.com/", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2699"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3654", "url": "https://setloki.com/", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2700"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Set-Cookie: __cfduid", "pluginId": "10011", "cweid": "614", "confidence": "Medium", "wascid": "13", "description": "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.", "messageId": "3661", "url": "https://setloki.com/robots.txt", "reference": "http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)", "solution": "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.", "alert": "Cookie Without Secure Flag", "param": "__cfduid", "attack": "", "name": "Cookie Without Secure Flag", "risk": "Low", "id": "2706"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3661", "url": "https://setloki.com/robots.txt", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2707"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3662", "url": "https://setloki.com/sitemap.xml", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2708"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "max-age=604800, public", "pluginId": "10015", "cweid": "525", "confidence": "Medium", "wascid": "13", "description": "The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.", "messageId": "3663", "url": "https://setloki.com", "reference": "https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching", "solution": "Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.", "alert": "Incomplete or No Cache-control and Pragma HTTP Header Set", "param": "Cache-Control", "attack": "", "name": "Incomplete or No Cache-control and Pragma HTTP Header Set", "risk": "Low", "id": "2709"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "3663", "url": "https://setloki.com", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2710"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "3663", "url": "https://setloki.com", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2711"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "3663", "url": "https://setloki.com", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2712"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4062", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C362.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2723"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4063", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2018_05_03/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2724"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4065", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2018_01_22/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2725"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4067", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_11_06/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2726"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4068", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_08_03/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2727"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4070", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_04_21/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2728"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4072", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2017_01_31/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2729"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4074", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_11_04/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2730"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4076", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_08_26/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2731"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4078", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_05_02/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2732"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4080", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2016_01_27/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2733"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4082", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2015_11_11/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2734"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4084", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2015_08_06/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2735"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4086", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2015_05_04/1.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2736"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4088", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2015_02_20/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2737"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4090", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_11_25/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2738"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4092", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_11_25/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2739"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4093", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_08_19/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2740"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4095", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_03_03/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2741"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4097", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_06/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2742"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4099", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2014_01_06/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2743"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4100", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_09_06/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2744"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4102", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/12.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2745"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4103", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/11.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2746"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4104", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/10.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2747"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4105", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/9.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2748"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4106", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/8.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2749"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4107", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/7.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2750"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4108", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2751"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4109", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2752"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4110", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2753"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4111", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2754"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4112", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2755"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4113", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C663.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2756"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4114", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2757"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4114", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2758"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4114", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2759"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4114", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2760"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4114", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1367", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2761"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4117", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2762"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4117", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2763"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4117", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2764"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4117", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2765"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4117", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2766"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4122", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2767"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4122", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2768"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4122", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2769"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4122", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2770"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4122", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2771"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4125", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2772"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4125", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2773"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4125", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2774"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4125", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2775"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4125", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2776"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4130", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2777"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4130", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2778"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4130", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2779"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4130", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2780"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4130", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2781"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4133", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2782"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4133", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2783"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4133", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2784"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4133", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2785"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4133", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2786"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4137", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C88.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2787"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4138", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_04_02%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2788"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4139", "url": "http://iyte.edu.tr/img/icon/e.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2789"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4141", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C643.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2790"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4142", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2791"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4142", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2792"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4142", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2793"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4142", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2794"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4142", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23170", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2795"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4144", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_15%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2796"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4145", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2797"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4145", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2798"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4145", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2799"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4145", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2800"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4145", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23202", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2801"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4147", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2802"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4147", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2803"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4147", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2804"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4147", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2805"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4147", "url": "http://iyte.edu.tr/Duyurular.aspx?m=e", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2806"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4149", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_08%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2807"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4150", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2808"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4150", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2809"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4150", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2810"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4150", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2811"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4150", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23194", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2812"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4152", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2813"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4152", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2814"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4152", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2815"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4152", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2816"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4152", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2817"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4157", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2818"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4157", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2819"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4157", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2820"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4157", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2821"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4157", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2822"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4164", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2823"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4164", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2824"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4164", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2825"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4164", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2826"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4164", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2827"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4168", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2828"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4168", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2829"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4168", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2830"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4168", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2831"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4168", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2832"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4174", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2833"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4174", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2834"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4174", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2835"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4174", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2836"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4174", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2837"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4179", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2838"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4179", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2839"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4179", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2840"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4179", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2841"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4179", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2842"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4186", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2843"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4186", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2844"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4186", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2845"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4186", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2846"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4186", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2847"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4192", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2848"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4192", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2849"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4192", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2850"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4192", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2851"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4192", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2852"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4198", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2853"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4198", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2854"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4198", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2855"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4198", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2856"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4198", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2857"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4203", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C89.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2858"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4204", "url": "http://iyte.edu.tr/Images/Duyurular/0/2017_12_28/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2859"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4208", "url": "http://iyte.edu.tr/img/icon/h.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2860"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4209", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C654.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2861"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4210", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2862"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4210", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2863"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4210", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2864"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4210", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2865"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4210", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23204", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2866"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4212", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2867"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4212", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2868"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4212", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2869"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4212", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2870"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4212", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23205", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2871"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4214", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2872"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4214", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2873"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4214", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2874"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4214", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2875"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4214", "url": "http://iyte.edu.tr/Duyurular.aspx?m=h", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2876"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4216", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2877"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4216", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2878"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4216", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2879"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4216", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2880"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4216", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23203", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2881"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4218", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C87.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2882"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4219", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2014_06_18%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2883"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4220", "url": "http://iyte.edu.tr/img/dateimg/ay/06.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2884"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4221", "url": "http://iyte.edu.tr/img/dateimg/yil/2014.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2885"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4222", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2014_06_18%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2886"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4223", "url": "http://iyte.edu.tr/img/icon/d.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2887"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4224", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C634.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2888"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4225", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2889"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4225", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2890"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4225", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2891"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4225", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2892"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4225", "url": "http://iyte.edu.tr/Duyurular.aspx?m=1910", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2893"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4227", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular/duyuru.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2894"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4228", "url": "http://iyte.edu.tr/img/dateimg/gun/10.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2895"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4229", "url": "http://iyte.edu.tr/img/dateimg/ay/04.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2896"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4230", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2897"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4230", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2898"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4230", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2899"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4230", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2900"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4230", "url": "http://iyte.edu.tr/Duyurular.aspx?m=d", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2901"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4232", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2902"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4232", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2903"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4232", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2904"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4232", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2905"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4232", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23175", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2906"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4262", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C34.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2944"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4263", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_03_27%5C%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2945"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4264", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C615.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2946"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4265", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2947"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4265", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2948"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4265", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2949"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4265", "url": "http://iyte.edu.tr/Default.aspx?m=1", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2950"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4270", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C416.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2955"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4271", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C618.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2956"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2957"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2958"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2959"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2960"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4272", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12883", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2961"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4274", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C625.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2962"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4275", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C8.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2963"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2964"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2965"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2966"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2967"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4276", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=85", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2968"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4278", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2018_02_23/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2969"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4280", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C13.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2970"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4281", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C622.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2971"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4282", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2972"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4282", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "2973"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4282", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "2974"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4282", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "2975"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4282", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=90", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "2976"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4299", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C627.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3001"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3002"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3003"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3004"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3005"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4300", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=88", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3006"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4302", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C380.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3007"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4308", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3016"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4308", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3017"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4308", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3018"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4308", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3019"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4308", "url": "http://iyte.edu.tr/Duyurular.aspx", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3020"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4348", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C479.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3083"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4349", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C37.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3084"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3085"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3086"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3087"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/jquery.ba-postmessage.min.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3088"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"https://form.iyte.edu.tr/js/machform_loader.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://form.iyte.edu.tr/js/machform_loader.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3089"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3090"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3091"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4350", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=125", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3092"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4352", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C661.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3093"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4353", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C9.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3094"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4354", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3095"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4354", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3096"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4354", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3097"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4354", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3098"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4354", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=86", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3099"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4356", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C659.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3100"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4357", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C50.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3101"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4359", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3103"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4359", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3104"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4359", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3105"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4359", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3106"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4359", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=41", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3107"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4365", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3115"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4365", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3116"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4365", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3117"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4365", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3118"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4365", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=124", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3119"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4367", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C316.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3120"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4368", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_10_11%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3121"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4369", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C665.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3122"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4370", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3123"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4370", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3124"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4370", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3125"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4370", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3126"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4370", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=904", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3127"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4377", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C674.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3136"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4378", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C386.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3137"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4379", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3138"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4379", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3139"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4379", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3140"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4379", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3141"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4379", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=89", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3142"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4430", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3222"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4430", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3223"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4430", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3224"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4430", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3225"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4430", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3226"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4434", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3227"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4434", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3228"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "GET", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4434", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3229"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4434", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3230"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4434", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3231"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4438", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C136.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3232"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4439", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C769.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3233"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4440", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3234"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4440", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3235"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4440", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3236"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4440", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3237"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4440", "url": "http://iyte.edu.tr/Duyurular.aspx?m=n", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3238"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4442", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C407.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3239"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4443", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C725.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3240"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3241"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3242"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3243"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3244"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4444", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=12609", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3245"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4446", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C305.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3246"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4447", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2017_06_02%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3247"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4448", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C798.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3248"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4449", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3249"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4449", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3250"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4449", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3251"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4449", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3252"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4449", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=886", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3253"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4453", "url": "http://iyte.edu.tr/Files%5CSayfalar%5C0%5C2017_06_02%5C1.pdf", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3258"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4508", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C189.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3393"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4509", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C737.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3394"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4510", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C191.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3395"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4511", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C632.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3396"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4512", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3397"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4512", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3398"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4512", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3399"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4512", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3400"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4512", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=358", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3401"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4514", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C193.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3402"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4515", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3403"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4515", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3404"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4515", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3405"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4515", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3406"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4515", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=356", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3407"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4516", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C619.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3408"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4518", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C194.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3409"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3410"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3411"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3412"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3413"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4519", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=398", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3414"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4521", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C714.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3415"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4522", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3416"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4522", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3417"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4522", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3418"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4522", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3419"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4522", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=399", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3420"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4566", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C364.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3526"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4567", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/18.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3527"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4568", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/19.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3528"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4569", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/20.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3529"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4570", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/17.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3530"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4571", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/21.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3531"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4572", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/22.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3532"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4573", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/23.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3533"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4574", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C387.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3534"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4575", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2013_05_27/24.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3535"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4576", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C299.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3536"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4577", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3537"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4577", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3538"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4577", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3539"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4577", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3540"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4577", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=1370", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3541"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4579", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3542"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4580", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3543"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4581", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3544"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4582", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3545"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4583", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3546"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4584", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3547"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4585", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C350.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3548"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4586", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_08_17%5C7.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3549"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4587", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3550"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4587", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3551"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4587", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3552"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4587", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3553"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4587", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=812", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3554"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4589", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C208.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3555"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4590", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3556"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4591", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3557"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4592", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3558"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4593", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3559"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4594", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3560"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4595", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3561"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4596", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C180.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3562"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3563"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3564"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3565"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3566"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4597", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=460", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3567"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4599", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C294.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3568"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4600", "url": "http://iyte.edu.tr/Images%5CSayfalar%5C0%5C2012_06_05%5C7.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3569"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4601", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C346.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3570"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4602", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C176.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3571"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4603", "url": "http://iyte.edu.tr/img/sayfaimg/defaults/alperdorukalkan.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3572"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4605", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3573"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4605", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3574"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4605", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3575"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4605", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3576"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4605", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=699", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3577"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4607", "url": "http://iyte.edu.tr/img/sayfaimg/defaults/doruktatoo.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3578"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4608", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C301.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3579"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4609", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C216.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3580"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4610", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C182.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3581"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3582"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3583"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3584"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3585"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4611", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=285", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3586"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4612", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3587"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4612", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3588"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4612", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3589"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4612", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3590"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4612", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=511", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3591"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4615", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2011_09_14/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3592"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4617", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C206.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3593"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4618", "url": "http://iyte.edu.tr/Images/Sayfalar/0/2011_09_14/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3594"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4619", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C300.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3595"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4620", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3596"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4620", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3597"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4620", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3598"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4620", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3599"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4620", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=448", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3600"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4674", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2012_03_27/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3734"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4675", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C211.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3735"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4678", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2012_03_27/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3736"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4679", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2012_03_27/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3737"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4680", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2012_03_27/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3738"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4681", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C699.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3739"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4682", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2012_03_27/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3740"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4683", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3741"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4683", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3742"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4683", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3743"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4683", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3744"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4683", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=492", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3745"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4685", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C293.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3746"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4686", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2011_12_28/8.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3747"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4688", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2011_12_28/6.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3748"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4689", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2011_12_28/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3749"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4690", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2011_12_28/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3750"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4691", "url": "http://iyte.edu.tr/Images/Sayfalar/492/2011_12_28/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3751"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4692", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C700.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3752"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3753"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3754"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3755"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3756"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4693", "url": "http://iyte.edu.tr/AltSayfa.aspx?m=612", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3757"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4701", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C22815%5C%5C2018_05_07%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3772"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4702", "url": "http://iyte.edu.tr/img/dateimg/gun/07.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3773"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4705", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3779"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4705", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3780"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4705", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3781"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4705", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3782"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4705", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23187", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3783"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4706", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_07%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3784"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4708", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_02%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3785"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4709", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_04_24%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3786"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4710", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3787"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4710", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3788"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4710", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3789"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4710", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3790"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4710", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23186", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3791"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4712", "url": "http://iyte.edu.tr/img/dateimg/gun/26.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3792"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4713", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_04_24%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3793"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4714", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_08%5C%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3794"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4715", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3795"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4715", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3796"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4715", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3797"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4715", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3798"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4715", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23180", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3799"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4717", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3800"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4717", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3801"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4717", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3802"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4717", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3803"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4717", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23195", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3804"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4719", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_04_24%5C%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3805"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4720", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_04_24%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3806"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4721", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3807"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4721", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3808"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4721", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3809"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4721", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3810"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4721", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23181", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3811"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4731", "url": "http://iyte.edu.tr/img/dateimg/gun/14.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3832"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4732", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_14%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3833"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4733", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3834"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4733", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3835"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4733", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3836"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4733", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3837"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4733", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23200", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3838"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4735", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_14%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3839"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4736", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_14%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3840"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4737", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_14/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3841"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4741", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_14/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3842"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4742", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_14/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3843"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4743", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_14%5C5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3844"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4744", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3845"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4744", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3846"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4744", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3847"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4744", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3848"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4744", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23201", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3849"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4746", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_10%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3850"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4747", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_10/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3851"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4748", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3852"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4748", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3853"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4748", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3854"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4748", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3855"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4748", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23196", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3856"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4751", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_10%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3857"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4752", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_10/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3858"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4753", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_10/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3859"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4754", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_05_10/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3860"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4755", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3861"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4755", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3862"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4755", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3863"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4755", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3864"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4755", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23197", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3865"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4757", "url": "http://iyte.edu.tr/img/dateimg/gun/08.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3866"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4758", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_08%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3867"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4759", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3868"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4759", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3869"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4759", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3870"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4759", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3871"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4759", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23193", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3872"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4761", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_05_04%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3873"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4762", "url": "http://iyte.edu.tr/img/dateimg/gun/04.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3874"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4763", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_08%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3875"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4764", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_05_04/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3876"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4766", "url": "http://iyte.edu.tr/Images%5CDuyurular%5C0%5C2018_05_04%5C3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3877"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4767", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3878"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4767", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3879"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4767", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3880"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4767", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3881"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4767", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23188", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3882"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4769", "url": "http://iyte.edu.tr/img/dateimg/gun/27.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3883"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4770", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_05_04/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3884"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4771", "url": "http://iyte.edu.tr/img/dateimg/ay/03.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3885"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4772", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_03_27/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3886"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4774", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_03_27/5.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3887"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4775", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_03_26%5C%5C2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3888"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4776", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_03_26/2.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3889"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3890"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3891"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3892"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3893"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4778", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23166", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3894"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4780", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_03_26/3.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3895"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4781", "url": "http://iyte.edu.tr/Images/Duyurular/0/2018_03_26/4.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3896"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4782", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3897"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4782", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3898"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4782", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3899"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4782", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3900"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4782", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23161", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3901"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4784", "url": "http://iyte.edu.tr/Image.ashx?f=Duyurular%5C%5C0%5C%5C2018_04_11%5C%5C1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3902"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4785", "url": "http://iyte.edu.tr/img/dateimg/gun/11.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3903"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3904"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "3905"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "3906"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3907"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4786", "url": "http://iyte.edu.tr/Duyurular.aspx?m=23176", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "3908"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4787", "url": "http://iyte.edu.tr/yonetim/Images/Duyurular/0/2018_04_11/1.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3909"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4806", "url": "http://iyte.edu.tr/yenikayit/css/coda-slider.css", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3950"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4807", "url": "http://iyte.edu.tr/yenikayit/js/jquery-ui-1.8.20.custom.min.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3951"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4808", "url": "http://iyte.edu.tr/yenikayit/js/jquery.scrollTo-1.4.3.1-min.js", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3952"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4811", "url": "http://iyte.edu.tr/yenikayit/img/dotm.png", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "3958"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4890", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C736.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4153"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4891", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C135.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4154"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4892", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "4155"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4892", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "4156"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4892", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "4157"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4892", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4158"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4892", "url": "http://iyte.edu.tr/Duyurular.aspx?m=v", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "4159"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4894", "url": "http://iyte.edu.tr/Image.ashx?f=UstResim%5C%5C134.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4160"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4895", "url": "http://iyte.edu.tr/Image.ashx?f=YanResim%5C%5C601.jpg", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4161"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script src=\"http://maps.google.com/maps?file=api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true\" type=\"text/javascript\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4896", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://maps.google.com/maps?file", "attack": "api&v=2&key=ABQIAAAAbDmCl3Es1i5fJRbUndpqHxRSpb0Xd4NYl3x0j7GAHs3ySFbNKBT0iERyhGUMnqBF-YlGQ7MkgMH83Q&sensor=true", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "4162"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "<script type=\"text/javascript\" src=\"http://w.sharethis.com/button/buttons.js\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "4896", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "http://w.sharethis.com/button/buttons.js", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "4163"}, {"sourceid": "3", "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).", "method": "POST", "evidence": "", "pluginId": "10016", "cweid": "933", "confidence": "Medium", "wascid": "14", "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server", "messageId": "4896", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/", "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.", "alert": "Web Browser XSS Protection Not Enabled", "param": "X-XSS-Protection", "attack": "", "name": "Web Browser XSS Protection Not Enabled", "risk": "Low", "id": "4164"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "4896", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "4165"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "16", "confidence": "Medium", "wascid": "15", "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", "messageId": "4896", "url": "http://iyte.edu.tr/Duyurular.aspx?m=a", "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx", "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).", "alert": "X-Frame-Options Header Not Set", "param": "X-Frame-Options", "attack": "", "name": "X-Frame-Options Header Not Set", "risk": "Medium", "id": "4166"}]